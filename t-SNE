import matplotlib.pyplot as plt
import numpy as np
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn import manifold
import readData

file = './example_file.xlsx'
data,pop_idx, pop_regi_idx, pop_regi_name_idx, unique_pop, unique_regi= readData.readExcelData(file)
NUM_POPU = len(unique_pop)
NUM_REGION = sum([len(x) for x in pop_regi_name_idx])

def lda(x,y,n_compoments):
    lda = LinearDiscriminantAnalysis(n_components=n_compoments)
    lda.fit(x, y)
    return lda.transform(x)

def plot_embedding(X,label,label_name,title = None):
    x_min,x_max = np.min(X,0),np.max(X,0)
    X = (X-x_min)/(x_max-x_min)

    plt.figure()
    ax = plt.subplot(111)
    scatter_size = 25
    if len(label_name)==NUM_POPU:
        color = ['steelblue','lawngreen','violet','orangeRed']
    elif len(label_name) ==NUM_REGION:
        color = ['black', 'dimgray', 'gray', 'silver', 'lightcoral', 'brown', 'maroon', 'red', 'mistyrose',
                  'darksalmon', 'sienna', 'saddlebrown', 'peru',
                 'darkorange', 'tan', 'orange', 'darkgoldenrod', 'darkkhaki', 'olive', 'y', 'chartreuse',
                  'darkseagreen',
                 'limegreen', 'mediumspringgreen', 'turquoise', 'paleturquoise', 'teal', 'cyan', 'cadetblue',
                  'deepskyblue', 'lightskyblue', 'steelblue', 'dodgerblue',
                 'darkslateblue', 'blueviolet', 'violet', 'mediumvioletred', 'pink']
    else:
        color = ['steelblue','lawngreen','violet','orangeRed', 'greenyellow', 'peru',  'lightsteelblue','saddlebrown','slateblue',
                      'lightseagreen', 'purple', 'cyan', 'olivedrab', 'firebrick',
                       'slategray', 'cadetblue',
                     'darkgreen', 'gold', 'magenta', 'goldenrod', 'blue',
                        'black']
        scatter_size = 40
    anno = []
    for x in range(max(label)+1):
        index = [i for (i, v) in enumerate(label) if v == x]
        anno.append(plt.scatter(X[index,0], X[index,1], marker='.', color=color[x],s= scatter_size))
    plt.legend(anno, [i for i in label_name],loc='upper right',fontsize=10)
    plt.xticks([]),plt.yticks([])
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)
    if title:
        plt.title(title)
    plt.show()

def tsne_plot(x,y,pop):
    tsne = manifold.TSNE(n_components=2, init='pca', random_state=0)
    X_sne = tsne.fit_transform(x)
    plot_embedding(X_sne, y, pop, '')
    plt.show()

#draw total population
group = [0 for _ in range(len(data))]
for i in range(len(pop_idx)):
    for k in pop_idx[i]:
        group[k] = i
y = group
x = data
# tsne dimension reduction
tsne_plot(x,y,unique_pop)


#draw total region
region = []
group = [0 for _ in range(len(data))]
class_num = 0
for i in range(len(pop_idx)):
    for j in range(len(pop_regi_idx[i])):
        for k in pop_regi_idx[i][j]:
            group[k] = class_num
        class_num+=1
        region.append(unique_pop[i]+'_'+unique_regi[pop_regi_name_idx[i][j]])
y = group
x = data
tsne_plot(x,y,region)


#draw each region of each population
for i in range(len(pop_regi_idx)):
    x = []
    y = []
    for j in range(len(pop_regi_idx[i])):
        x += [data[x] for x in pop_regi_idx[i][j]]
        y+=[pop_regi_name_idx[i][j] for _ in range(len(pop_regi_idx[i][j]))]

    label_trans_dict = dict(zip(np.unique(y), range(len(np.unique(y)))))
    label_trans = [label_trans_dict[i] for i in y]
    y = label_trans

    pop = [unique_regi[x] for x in pop_regi_name_idx[i]]
    tsne_plot(x, y, pop)
